* Notes
** Ledger Format
The canonical source is on the [[https://www.ledger-cli.org/3.0/doc/ledger3.html#Journal-File-Format-for-Developers][ledger website]]. There's a [[https://devhints.io/ledger][cheat sheet]]
for what that's worth. Plaintextaccounting.org has an [[https://plaintextaccounting.org/quickref/][overview]] as well.
** Nullability
The nullability experiment doesn't work as expected yet. It didn't
appear to be possible to compile the test suite in a way that includes
the nullability compilation flag.


* Tasks
** DONE Parse Date
** DONE Add travis badge
** DONE Add readme
** DONE Add License
** DONE Add second date
** DONE Refactor =LedgerParserDefinition=
I should be using overrides instead of ad-hoc computations for transactionLine
** DONE Parse Amount
into string currency and string value
** DONE Parse Account
** DONE Split into different files
** DONE Determine behaviour on null description
It is allowed, descriptions are nullable
** DONE Add support for account declarations [7/7]
=account Foo:Bar=
- [X] Heterogenuous list of statements
- [X] Adapt test harness
- [X] Add isolated test
- [X] Add integrated test
- [X] Declare =Account= data type
- [X] Extend grammar
- [X] Write parser
** TODO Parse amount value [6/10]
Allow for different locales, etc. We'll do an automatic discovery
first (like hledger). Note that grouping isn't always done by
threes. Hindi seems to do it [[https://docs.microsoft.com/en-us/globalization/locale/number-formatting][differently]]. It's probably best to just
ignore the 1k-markers altogether.
- [X] Look at how hledger does it
- [X] Find bignum format without precision loss for dart
- [X] Depend on [[https://pub.dev/packages/decimal][decimal]] for arbitrary precision
- [X] Adapt types in data
- [X] Add tests for Amount parsing & Serialisation
- [X] Rewrite old tests that test number amount
- [ ] Add new tests. [[https://docs.oracle.com/cd/E19455-01/806-0169/overview-9/index.html][The formats we want to support]] (German is wrong, it shoud be periods for all 1k seps)
  - [ ] 1k: =space=, radix: =,=
  - [ ] 1k: =thin space=, radix: =,=
  - [ ] 1k: =,=, radix: =.=
  - [ ] 1k =.=, radix: =,=
- [ ] Adapt grammar
- [ ] Adapt semantics
** TODO Support commodity directive
=commodity Apples 1.000,00=

What happens with multiple declarations? How can we keep parser state?
** TODO Render amounts with the correct commodity format
** TODO Allow minus sign on the left side of commodity
Hledger [[https://hledger.org/journal.html#amounts][allows it]]...
** TODO Make year optional in parsing dates
Just take the current year?
** TODO Find out what happens when more than one line has =null= amount
** TODO Add balance method to transaction class
We'd have to deal with currencies. There's an interesting [[https://deque.blog/2017/08/17/a-study-of-4-money-class-designs-featuring-martin-fowler-kent-beck-and-ward-cunningham-implementations/][blog
post]]. I like the proposal of using associative maps per currency there.
** TODO Add balance assertions
Should the balance assertion be part of a transaction line, or should
the parser spit it out as a separate assertion element in the list of
transactions/parse results?
** TODO Add serialisation
** TODO Attempt to re-enable nullable experiment
** TODO Support comments
** TODO Consider adding position information to parse result
The idea is that a client can navigate to the corresponding
information in the file and excise/manipulate it easily without having
to re-render the entire file.
** TODO Publish on pub.dev
